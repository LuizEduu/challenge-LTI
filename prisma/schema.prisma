// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  EMPLOYEE
  MANAGER
}

model User {
  id             String           @id @default(uuid())
  name           String
  email          String           @unique
  password       String
  role           UserRole         @default(EMPLOYEE)
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  UserDepartment UserDepartment[]
  UserBenefits   UserBenefits[]
  Payroll        Payroll[]

  @@map("users")
}

model Department {
  id        String   @id @default(uuid())
  name      String   @unique
  managerId String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  UserDepartment UserDepartment[]
  Payroll        Payroll[]

  @@map("departments")
}

model UserDepartment {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  departmentId String   @map("department_id")
  createdAt    DateTime @default(now()) @map("created_at")

  user       User       @relation(fields: [userId], references: [id])
  department Department @relation(fields: [departmentId], references: [id])

  @@map("users_departments")
}

model Benefit {
  id              String            @id @default(uuid())
  name            String            @unique
  description     String
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  value           Float
  UserBenefits    UserBenefits[]
  PayrollBenefits PayrollBenefits[]

  @@map("benefits")
}

model UserBenefits {
  id        String @id @default(uuid())
  benefitId String @map("benefit_id")
  userId    String @map("user_id")

  benefit Benefit @relation(fields: [benefitId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@map("user_benefits")
}

model Payroll {
  id           String   @id @default(uuid())
  name         String
  firstPeriod  DateTime @map("first_period")
  lastPeriod   DateTime @map("last_period")
  month        Int
  year         Int
  totalPayment Float    @map("total_payment")
  departmentId String   @map("department_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt
  emplooyeId   String   @map("emplooye_id")

  user            User              @relation(fields: [emplooyeId], references: [id])
  department      Department        @relation(fields: [departmentId], references: [id])
  PayrollBenefits PayrollBenefits[]

  @@map("payroll")
}

model PayrollBenefits {
  id        String   @id @default(uuid())
  payrollId String   @map("payroll_id")
  benefitId String   @map("benefit_id")
  createdAt DateTime @default(now()) @map("created_at")

  payroll Payroll @relation(fields: [payrollId], references: [id])
  benefit Benefit @relation(fields: [benefitId], references: [id])

  @@map("payroll_benefits")
}
